#!/usr/bin/env python

import os
import sys
import socket
import select
import struct
import json
import hashlib
import ConfigParser
import cPickle as pickle

config = ConfigParser.ConfigParser()
config.read( 'server.conf' )

buffer_size	= config.getint( 'general', 'buffer_size' )

network_group 	= config.get( 'status', 'network_group' )
network_port 	= config.getint( 'status', 'network_port' )
meta_root	= config.get( 'status', 'meta_root' )

data_address	= config.get( 'data', 'network_address' )
data_port	= config.getint( 'data', 'network_port' )
data_root	= config.get( 'data', 'data_root' )

def _ls( dirname ):
	if dirname is None:
		dirname = './'
	return os.listdir( dirname )

def _open( filename = None, fd = {} ):
	response = []
	if filename is None:
		return response
	os.chdir(os.path.join(meta_root, filename))
	response.append( {
		'base': os.readlink('base'),
		'top': os.readlink('top')
	} )
	return response

def _read( filename = None, fd = {} ):
	response = []
	request = fd['request']
	if filename is None:
		return response
	os.chdir(os.path.join(meta_root, filename))
	file_list = os.listdir('./')
	file_list.remove('base')
	file_list.remove('top') 
	file_inspect = file_list[0]
	
	while True:
		if request == file_inspect:
			os.chdir(request)
			next = os.listdir('./')[0]

			filename = os.path.join( data_root, request[:4], request ) 
			df = open(filename, "r")
			response.append( {
				'next': next,
				'data': pickle.dumps(df.read( buffer_size )),
			} )
			break
		else:
			print >> sys.stderr, "=== file_inspect='%s'" % file_inspect
			if isinstance(file_inspect, list):
				file_inspect = file_inspect.pop()
			os.chdir(file_inspect)
			file_inspect = os.listdir('./')
	return response

def _stat( filename ):
	if filename is None:
		filename = '.'
	return str(os.stat(filename))

def _mv():
	pass

def _cp():
	pass

def _ln():
	pass

def _close():
	pass
	
command = {
	'ls': 		_ls,
	'open':		_open,
	'mv':		_mv,
	'cp':		_cp,
	'ln':		_ln,
	'stat':		_stat,
	'read':		_read,
}

s = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
s.bind( ('', network_port) )
group = socket.inet_aton( network_group )
mreq = struct.pack( '4sL', group, socket.INADDR_ANY )
s.setsockopt( socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq )

ds = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
ds.bind( ( data_address, data_port) )

while 1:

	read, _, _ = select.select( [ s, ds ], [], [] )
	msg_in, remote_addr = read[0].recvfrom( buffer_size )

	print "received='%s' from '%s'" % ( msg_in, remote_addr )
	msg_out = json.loads( msg_in )

	argument = msg_out.get( 'argument', None )
	filename = msg_out.get( 'filename', None )
	result = []
	result = command[msg_out['command']](filename, msg_out)
	print >> sys.stderr, "=== result='%s'" % result
	msg_out['result'] = result.pop()

	msg_out['pid'] = os.getpid()
	msg_out['host'] = (data_address, data_port)

	print >> sys.stderr, "=== msg_out='%s'" % json.dumps(msg_out)

	s.sendto( json.dumps( msg_out ), remote_addr )

s.close()
sys.exit(0)
