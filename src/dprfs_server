#!/usr/bin/env python

import os
import sys
import socket
import select
import struct
import json
import hashlib
import ConfigParser
import xattr
import binascii

from lib.server.dprfs_open import _open
from lib.server.dprfs_read import _read
from lib.server.dprfs_write import _write

config = ConfigParser.ConfigParser()
config.read( 'server.conf' )

buffer_size	= config.getint( 'general', 'buffer_size' )
network_port 	= config.getint( 'general', 'network_port' )

network_group 	= config.get( 'status', 'network_group' )
meta_root	= config.get( 'status', 'meta_root' )

data_address	= config.get( 'data', 'network_address' )
data_root	= config.get( 'data', 'data_root' )

command = {
	'open':		_open,
	'read':		_read,
	'write':	_write,
}

s = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
s.bind( ('', network_port) )
group = socket.inet_aton( network_group )
mreq = struct.pack( '4sL', group, socket.INADDR_ANY )
s.setsockopt( socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq )

ds = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
ds.setsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 )
ds.bind( ( data_address, network_port) )

while 1:
	p = {
	  'id':	None,
	  'h':	None,
	  'cmd': None,
	  'r':	None,
	}

	read_fd, _, _ = select.select( [ s, ds ], [], [] )
	msg_in = {}
	msg_in, remote_addr = read_fd[0].recvfrom( 4096 * 8 )

	msg_in = json.loads( msg_in )

	p = {
		'id':	msg_in['id'],
		'cmd':	msg_in['cmd'],
		'h':	(data_address, network_port),
	}

	p['r'] = command[p['cmd']](msg_in)

	s.sendto( json.dumps( p ), remote_addr )

s.close()
sys.exit(0)
