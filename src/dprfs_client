#!/usr/bin/env python

import os
import sys
import socket
import select
import struct
import json
import time
import uuid
import ConfigParser

#from client import dprf_open

message = {
	'filename':	None,
	'request':	None,
	'result':	None,
	'host':		None,
	'command':	None,
}

config = ConfigParser.ConfigParser()
config.read( 'client.conf' )

network_address	= config.get( 'client', 'network_address' )
network_port	= config.getint( 'client', 'network_port' )
status_timeout	= config.getfloat( 'client', 'status_timeout' )
data_timeout	= config.getfloat( 'client', 'data_timeout' )
buffer_size	= config.getint( 'client', 'buffer_size' )


def dprfs_open( s, filename = None ):

	message['command'] = 'open'
	message['filename'] = filename

	sent = s.sendto( json.dumps(message), ( network_address, network_port ) )
	s.settimeout( status_timeout )
	start = time.time()

	try:
		msg_in, sender_addr = s.recvfrom( buffer_size )
	except socket.timeout, ex:
		print >> sys.stderr, "socket.timeout %s" % ex
		raise ex
	print "=== msg_in='%s'" % msg_in 

	return msg_in

def dprfs_read ( s, fd ):

	fd['command'] = 'read'
	fd['request'] = fd['result']['base'] 
	del fd['result']
	host = fd['host'][0]
	port = fd['host'][1]
	del fd['host']
	while True:
		s.settimeout( data_timeout )
		print >> sys.stderr, "=== out='%s'" % json.dumps(fd)
		s.sendto( json.dumps(fd), ( host, port ) )
		start = time.time()
		try:
			msg_in, sender_addr = s.recvfrom( buffer_size )
		except socket.timeout, ex:
			print >> sys.stderr, "=== socket.timeout '%s'" % ex
			break
		
		print >> sys.stderr, "=== len='%d'  msg_in='%s'" % ( len(msg_in), msg_in )

		response = json.loads(msg_in)
		
		current = response['request']
		top = response['result']['top']
		fd['request'] = response['result']['next']

		return response['result']['data']

		if current == top:
			return


command = {
        'open':         dprfs_open,
        'read':         dprfs_read,
}

cmd = sys.argv[1]

s = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )

ttl = struct.pack( 'b', 1 )
s.setsockopt( socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl )

result = dprfs_open(s, cmd)
result = json.loads(result)
r = dprfs_read( s, result )
print r
s.close()
sys.exit(0)

