#!/usr/bin/env python

import os
import sys
import socket
import select
import struct
import json
import time
import uuid
import ConfigParser
import binascii

#from client import dprf_open

message = {
	'filename':	None,
	'id':		None,
	'r':		None,
	'h':		None,
	'cmd':		None,
}

config = ConfigParser.ConfigParser()
config.read( 'client.conf' )

network_address	= config.get( 'client', 'network_address' )
network_port	= config.getint( 'client', 'network_port' )
status_timeout	= config.getfloat( 'client', 'status_timeout' )
data_timeout	= config.getfloat( 'client', 'data_timeout' )
buffer_size	= config.getint( 'client', 'buffer_size' )


def dprfs_open( s, filename ):

	message = {
		'id':	None,
		'cmd':	'open',
		'fn':	filename,
	}

	print "=== msg_out='%s'" % message 
	sent = s.sendto( json.dumps(message), ( network_address, network_port ) )
	s.settimeout( status_timeout )
	start = time.time()

	try:
		msg_in, sender_addr = s.recvfrom( buffer_size )
		s.settimeout( 0 )
	except socket.timeout, ex:
		print >> sys.stderr, "socket.timeout %s" % ex
		raise ex
	print "=== msg_in='%s'" % msg_in 

	return msg_in

def dprfs_read ( s, fd ):

	host = fd['h'][0]
	port = fd['h'][1]

	fd = {
		'id':	None,
		'cmd':	'read',
		'r':	{
		  'next':	fd['r']['next'],
		  'fn':		fd['r']['fn'],
		}
	}

	#print >> sys.stderr, "=== out='%s'" % json.dumps(fd)

	s.settimeout( data_timeout )

	s.sendto( json.dumps(fd), ( host, port ) )

	start = time.time()
	try:
		msg_in, sender_addr = s.recvfrom( buffer_size )
		s.settimeout( 0 )
	except socket.timeout, ex:
		print >> sys.stderr, "=== socket.timeout '%s'" % ex
		return None
	
	return json.loads(msg_in)

def dprf_write ( s, fd, sys_fd ):

	host = fd['h'][0]
	port = fd['h'][1]

	previous = None
	top = None

	while top is None:
		r = sys_fd.read( buffer_size )
		if r == '':
			top = previous

		r = binascii.b2a_base64( r )

		p = {
			'id':	None,
			'cmd':	'write',
			'fn':	fd['r']['fn'],
			'r':	{
				'data': r,
				'prev': previous,
				'top':	top,
			},
		}
		#print >> sys.stderr, "=== msg_out='%s'" % json.dumps(p)
		s.settimeout( data_timeout )
		s.sendto( json.dumps(p), ( host, port ) )

		start = time.time()
		try:
			msg_in, sender_addr = s.recvfrom( buffer_size )
			#print >> sys.stderr, "=== msg_in='%s'" % msg_in
			s.settimeout( 0 )
			msg_in = json.loads( msg_in )
			if previous == msg_in['r']['base']:
				print >> sys.stderr, "=== loop? %s" % previous
				return None
			previous = msg_in['r']['base']
		except socket.timeout, ex:
			print >> sys.stderr, "=== socket.timeout '%s'" % ex
			return None
	

command = {
        'open':         dprfs_open,
        'read':         dprfs_read,
}

filename = sys.argv[1]

s = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )

ttl = struct.pack( 'b', 1 )
s.setsockopt( socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl )

result = dprfs_open(s, filename)
result = json.loads(result)

#result['r']['next'] = result['r']['base']

fp = open( filename, "rb")

dprf_write( s, result, fp )

	#fp.write( binascii.a2b_base64( r['r']['data'] ) )
s.close()
fp.close()
sys.exit(0)

