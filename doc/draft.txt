__Data Protocol__
1. open() of the existing file records the current HEAD in the file structure.
  when write() the file back, we should only send a diff.
  when sending data over the wire we can send the starting hash and the diff.

what happens when there is a conflict applying the patch.

how can we implement mmap()?

writing data at address (seek).

=============================
content packet

	mount hash
	location hash (directory)
	parent content hash - the digest of the content when we opened afile
	client identification
	content chunk parent hash (previous chunk hash. directed cyclical graph)
	content chunk hash
	content data (data length adjusts based on the MTU size)


when server receives the content packet
  1. writes it into a journal log
  2. if parent hash and current data hash match then it apply the data to the target file
	and updates the current hash
  3. if parent hash does not match then the data remains in the journal
	host should contact neighboring host to get the missing content chunk(s)
  4. if content chunk applied cleanly the the target file, the entry should be remove from a journal


Hashing
  1. each filesystem has its own hash seed.
	hash seed is set during configuration
	it can be changed but the entire filesystem tree needs tbe re-checked.


Deduplication
  1. store hash of a data block

P2P for clients on the same network???


m: mount_hash \n
l: directory_hash \n
o: start_hash \n
a: client identification \n
p: previous_data_chunk_bash \n
h: data_chunk_hash \n
d: data
